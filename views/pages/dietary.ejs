<%-include("../partials/header")-%>
<body class="flex">
  <%-include("../partials/sidebar")-%>
  <div class="py-5 flex-auto">
    <div class="flex justify-between">
      <h1 class="text-2xl font-roboto ml-3 font-bold">Dietary</h1>
      <div class="px-8 cursor-pointer"><%=username %></div>
    </div>
    <div class="mt-5 ml-3">
      <div
        class="text-slate-950 text-2xl font-semibold w-5/6 h-3/4 m-auto mt-10 grid md:grid-cols-2"
      >
        <div>
          <div>
            <canvas id="dietChart"> </canvas>
          </div>
          <p id="dietInfo" class="text-center text-base">Calories Remaining</p>
          <form
            id="calForm"
            class="flex justify-center gap-3 items-center mt-4"
          >
            <label class="text-sm">Add Calories: </label>
            <input
              name="calories"
              placeholder="in calories"
              class="border-2 px-2 text-sm focus:ring-blue-600 focus:border-blue-600"
              name=""
              type="number"
              min="1"
              max="10000"
              required
            />
            <span class="text-base">cal</span>
            <button
              id="addCal"
              class="text-xs border-2 font-bold px-3 py-1 border-none active:border-none focus:border-none hover:bg-blue-600 rounded-md bg-blue-500 text-white"
            >
              Add
            </button>
          </form>
          <p class="text-xs mt-0 text-neutral-700 text-center">
            This value will be added on top of previous calorie intake for the day
          </p>
        </div>
        <div>
          <div>
            <canvas id="waterChart"> </canvas>
          </div>
          <p id="waterInfo" class="text-center text-base">Liters to go!</p>
          <form
            id="waterForm"
            class="flex justify-center gap-3 items-center mt-4"
          >
            <label class="text-sm">Water Intake: </label>
            <input
              name="water"
              placeholder="in litres"
              class="border-2 px-2 text-sm focus:ring-blue-600 focus:border-blue-600"
              name=""
              type="number"
              step="0.5"
              min="0.5"
              max="10"
              required
            />
            <span class="text-base">&#8467;</span>
            <button
              id="addWater"
              class="text-xs border-2 font-bold px-3 py-1 border-none active:border-none focus:border-none hover:bg-blue-600 rounded-md bg-blue-500 text-white"
            >
              Add
            </button>
          </form>
          <p class="text-xs mt-0 text-neutral-700 text-center">
            This value will be added on top of previous water intake for the day
          </p>
        </div>
      </div>
      <div class="w-5/6 h-3/4 m-auto mt-5 grid grid-cols-7"></div>
    </div>
  </div>
</body>

<script>
  const dietChart = document.getElementById("dietChart");
  const waterChart = document.getElementById("waterChart");
  const calForm = document.getElementById("calForm");
  const waterForm = document.getElementById("waterForm");
  const addWaterBtn = document.getElementById("addWater");
  const addCalBtn = document.getElementById("addCal");
  const dietInfo = document.getElementById("dietInfo")
  const waterInfo = document.getElementById("waterInfo")

  const waterGoal = parseFloat("<%= profile.waterintakegoal %>")
  const calorieGoal = parseInt("<%= profile.calorielimit %>")


  function getTodayDate() {
    let currentDate = new Date();
    const offset = currentDate.getTimezoneOffset();
    currentDate = new Date(currentDate.getTime() - offset * 60 * 1000);
    return currentDate.toISOString().split("T")[0];
  }

  function updateInfos(diet, water){
    const remainWater = waterGoal - water
    const remainDiet = calorieGoal - diet

    if(remainDiet <= 0) {
        dietInfo.textContent = "You have reached calorie Limit!"
    }else{
        dietInfo.textContent = remainDiet + " Calories Remaining"
    }

    if(remainWater <= 0) {
        waterInfo.textContent = "Water Goal reached"
    }else{
        waterInfo.textContent = remainWater + " Liters to go!"
    }
  }

  function chartOptions(label) {
    const options = {
      plugins: {
        title: {
          display: true,
          text: label,
        },
      },
      beziercurve: true,
      responsive: true,
      aspectRatio: 1,
      maintainAspectRatio: false,
    };

    return options;
  }

  function createWaterGraph(waterConsumed) {
    new Chart(waterChart, {
        type: "doughnut",
        data: {
          labels: ["Remaining", "Water Consumed"],
    
          datasets: [
            {
              label: "Daily Water Consumed",
    
              data: [(waterGoal - waterConsumed < 0) ? 0 : (waterGoal-waterConsumed), waterConsumed],
    
              backgroundColor: ["rgb(255, 99, 132)", "rgb(54, 162, 235)"],
    
              hoverOffset: 4,
            },
          ],
        },
        options: chartOptions("Water Consumed"),
      });
  }

  function createCalorieGraph(calorieConsumed) {
    new Chart(dietChart, {
        type: "doughnut",
        data: {
          labels: ["Remaining", "Calories Consumed"],
    
          datasets: [
            {
              label: "Daily Calories consumed",
    
              data: [(calorieGoal - calorieConsumed < 0) ? 0 : (calorieGoal-calorieConsumed), calorieConsumed],
    
              backgroundColor: ["rgb(255, 99, 132)", "rgb(255, 205, 86)"],
    
              hoverOffset: 4,
            },
          ],
        },
        options: chartOptions("Calories Consumed"),
      });
  }

  calForm.addEventListener("submit", async (e) => {
    e.preventDefault()
    try {
      const date = getTodayDate();
      const caloriesConsumed = calForm.calories.value

      const res = await fetch("/dietary/calorie", {
        method: "PUT",
        body: JSON.stringify({
            date, caloriesConsumed
        }),
        headers: { "Content-Type": "application/json" },
      });

      const data = await res.json();
      console.log(data);

      if (res.ok) {
        updateInfos(data.calorieconsumed, data.waterintake)
        calForm.calories.value = ""
      } else {
        console.log("error");
        //emailError.textContent = data.email
      }
    } catch (e) {
      console.log(e.message);
    }
  });

  waterForm.addEventListener("submit", async (e) => {
    e.preventDefault()
    try {
      const date = getTodayDate();
      const waterConsumed = waterForm.water.value

      const res = await fetch("/dietary/water", {
        method: "PUT",
        body: JSON.stringify({
            date, waterConsumed
        }),
        headers: { "Content-Type": "application/json" },
      });

      const data = await res.json();
      console.log(data);

      if (res.ok) {
        updateInfos(data.calorieconsumed, data.waterintake)
        waterForm.water.value = ""
      } else {
        console.log("error");
        //emailError.textContent = data.email
      }
    } catch (e) {
      console.log(e.message);
    }
  })

  async function getHistory() {
    try {
        const date = getTodayDate();
        const caloriesConsumed = calForm.calories.value
  
        const res = await fetch(`/history/single?date=${date}`, {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });
  
        const data = await res.json();
        console.log(data);
  
        if (res.ok) {
          createWaterGraph(data.waterintake)
          createCalorieGraph(data.calorieconsumed)
          updateInfos(data.calorieconsumed, data.waterintake)
        } else {
          console.log("error");
          //emailError.textContent = data.email
        }
      } catch (e) {
        console.log(e.message);
      }
  }

  window.onload = getHistory;
</script>
